/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_basepolygon_free(a: number, b: number): void;
export function __wbg_get_basepolygon_extruded(a: number): number;
export function __wbg_set_basepolygon_extruded(a: number, b: number): void;
export function __wbg_get_basepolygon_extruded_height(a: number): number;
export function __wbg_set_basepolygon_extruded_height(a: number, b: number): void;
export function __wbg_get_basepolygon_is_polygon(a: number): number;
export function __wbg_set_basepolygon_is_polygon(a: number, b: number): void;
export function __wbg_get_basepolygon_position(a: number): number;
export function __wbg_set_basepolygon_position(a: number, b: number): void;
export function __wbg_get_basepolygon_rotation(a: number): number;
export function __wbg_set_basepolygon_rotation(a: number, b: number): void;
export function __wbg_get_basepolygon_scale(a: number): number;
export function __wbg_set_basepolygon_scale(a: number, b: number): void;
export function basepolygon_set_id(a: number, b: number, c: number): void;
export function basepolygon_id(a: number, b: number): void;
export function basepolygon_new(a: number, b: number): number;
export function basepolygon_new_with_circle(a: number): number;
export function basepolygon_new_with_rectangle(a: number): number;
export function basepolygon_add_vertices(a: number, b: number, c: number): void;
export function basepolygon_add_vertex(a: number, b: number): void;
export function basepolygon_add_holes(a: number, b: number, c: number): void;
export function basepolygon_triangulate(a: number, b: number): void;
export function basepolygon_new_triangulate(a: number, b: number): void;
export function basepolygon_get_buffer_flush(a: number, b: number): void;
export function basepolygon_clear_vertices(a: number): void;
export function basepolygon_reset_polygon(a: number): void;
export function basepolygon_extrude_by_height(a: number, b: number, c: number): void;
export function basepolygon_get_outlines(a: number, b: number): void;
export function basepolygon_get_geometry(a: number, b: number): void;
export function __wbg_vector3d_free(a: number, b: number): void;
export function vector3d_create(a: number, b: number, c: number): number;
export function vector3d_update(a: number, b: number, c: number, d: number): void;
export function vector3d_add(a: number, b: number): number;
export function vector3d_subtract(a: number, b: number): number;
export function vector3d_add_scalar(a: number, b: number): number;
export function vector3d_subtract_scalar(a: number, b: number): number;
export function vector3d_add_extrude_in_up(a: number, b: number, c: number): number;
export function vector3d_cross(a: number, b: number): number;
export function vector3d_dot(a: number, b: number): number;
export function vector3d_clone(a: number): number;
export function __wbg_matrix3d_free(a: number, b: number): void;
export function __wbg_get_matrix3d_m11(a: number): number;
export function __wbg_set_matrix3d_m11(a: number, b: number): void;
export function __wbg_get_matrix3d_m12(a: number): number;
export function __wbg_set_matrix3d_m12(a: number, b: number): void;
export function __wbg_get_matrix3d_m13(a: number): number;
export function __wbg_set_matrix3d_m13(a: number, b: number): void;
export function __wbg_get_matrix3d_m21(a: number): number;
export function __wbg_set_matrix3d_m21(a: number, b: number): void;
export function __wbg_get_matrix3d_m22(a: number): number;
export function __wbg_set_matrix3d_m22(a: number, b: number): void;
export function __wbg_get_matrix3d_m23(a: number): number;
export function __wbg_set_matrix3d_m23(a: number, b: number): void;
export function __wbg_get_matrix3d_m31(a: number): number;
export function __wbg_set_matrix3d_m31(a: number, b: number): void;
export function __wbg_get_matrix3d_m32(a: number): number;
export function __wbg_set_matrix3d_m32(a: number, b: number): void;
export function __wbg_get_matrix3d_m33(a: number): number;
export function __wbg_set_matrix3d_m33(a: number, b: number): void;
export function matrix3d_set(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function matrix3d_add(a: number, b: number): number;
export function matrix3d_subtract(a: number, b: number): number;
export function __wbg_colorrgb_free(a: number, b: number): void;
export function __wbg_get_colorrgb_r(a: number): number;
export function __wbg_set_colorrgb_r(a: number, b: number): void;
export function __wbg_get_colorrgb_g(a: number): number;
export function __wbg_set_colorrgb_g(a: number, b: number): void;
export function __wbg_get_colorrgb_b(a: number): number;
export function __wbg_set_colorrgb_b(a: number, b: number): void;
export function colorrgb_new(a: number, b: number, c: number): number;
export function colorrgb_to_hex(a: number, b: number): void;
export function __wbg_color_free(a: number, b: number): void;
export function color_new(a: number, b: number): number;
export function color_to_rgba(a: number, b: number): void;
export function __wbg_get_vector3d_x(a: number): number;
export function __wbg_get_vector3d_y(a: number): number;
export function __wbg_get_vector3d_z(a: number): number;
export function __wbg_set_vector3d_x(a: number, b: number): void;
export function __wbg_set_vector3d_y(a: number, b: number): void;
export function __wbg_set_vector3d_z(a: number, b: number): void;
export function __wbg_ogsimpleline_free(a: number, b: number): void;
export function ogsimpleline_set_id(a: number, b: number, c: number): void;
export function ogsimpleline_id(a: number, b: number): void;
export function ogsimpleline_new(a: number, b: number): number;
export function ogsimpleline_clone(a: number): number;
export function ogsimpleline_set_config(a: number, b: number, c: number): void;
export function ogsimpleline_get_points(a: number, b: number): void;
export function ogsimpleline_get_raw_points(a: number, b: number): void;
export function __wbg_ogpolyline_free(a: number, b: number): void;
export function ogpolyline_set_id(a: number, b: number, c: number): void;
export function ogpolyline_id(a: number, b: number): void;
export function ogpolyline_new(a: number, b: number): number;
export function ogpolyline_clone(a: number): number;
export function ogpolyline_set_config(a: number, b: number, c: number): void;
export function ogpolyline_add_point(a: number, b: number): void;
export function ogpolyline_destroy(a: number): void;
export function ogpolyline_get_points(a: number, b: number): void;
export function ogpolyline_get_raw_points(a: number, b: number): void;
export function ogpolyline_is_closed(a: number): number;
export function ogpolyline_check_closed_test(a: number): void;
export function ogsimpleline_dispose_points(a: number): void;
export function ogsimpleline_destroy(a: number): void;
export function ogpolyline_dispose_points(a: number): void;
export function __wbg_ogrectangle_free(a: number, b: number): void;
export function ogrectangle_set_id(a: number, b: number, c: number): void;
export function ogrectangle_id(a: number, b: number): void;
export function ogrectangle_new(a: number, b: number): number;
export function ogrectangle_clone(a: number): number;
export function ogrectangle_set_config(a: number, b: number, c: number, d: number): void;
export function ogrectangle_generate_points(a: number): void;
export function ogrectangle_update_width(a: number, b: number): void;
export function ogrectangle_update_breadth(a: number, b: number): void;
export function ogrectangle_update_center(a: number, b: number): void;
export function ogrectangle_destroy(a: number): void;
export function ogrectangle_get_points(a: number, b: number): void;
export function ogrectangle_get_raw_points(a: number, b: number): void;
export function ogrectangle_dispose_points(a: number): void;
export function __wbg_baseflatmesh_free(a: number, b: number): void;
export function __wbg_get_baseflatmesh_extruded(a: number): number;
export function __wbg_set_baseflatmesh_extruded(a: number, b: number): void;
export function __wbg_get_baseflatmesh_is_mesh(a: number): number;
export function __wbg_set_baseflatmesh_is_mesh(a: number, b: number): void;
export function __wbg_get_baseflatmesh_position(a: number): number;
export function __wbg_set_baseflatmesh_position(a: number, b: number): void;
export function __wbg_get_baseflatmesh_rotation(a: number): number;
export function __wbg_set_baseflatmesh_rotation(a: number, b: number): void;
export function __wbg_get_baseflatmesh_scale(a: number): number;
export function __wbg_set_baseflatmesh_scale(a: number, b: number): void;
export function baseflatmesh_set_id(a: number, b: number, c: number): void;
export function baseflatmesh_id(a: number, b: number): void;
export function baseflatmesh_new(a: number, b: number): number;
export function baseflatmesh_add_vertices(a: number, b: number, c: number): void;
export function baseflatmesh_add_vertex(a: number, b: number): void;
export function baseflatmesh_triangulate(a: number, b: number): void;
export function baseflatmesh_get_buffer_flush(a: number, b: number): void;
export function baseflatmesh_reset_mesh(a: number): void;
export function __wbg_circlearc_free(a: number, b: number): void;
export function circlearc_set_id(a: number, b: number, c: number): void;
export function circlearc_id(a: number, b: number): void;
export function circlearc_new(a: number, b: number): number;
export function circlearc_clone(a: number): number;
export function circlearc_set_config(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function circlearc_generate_points(a: number): void;
export function circlearc_update_radius(a: number, b: number): void;
export function circlearc_update_center(a: number, b: number): void;
export function circlearc_destroy(a: number): void;
export function circlearc_get_points(a: number, b: number): void;
export function circlearc_get_raw_points(a: number, b: number): void;
export function circlearc_dispose_points(a: number): void;
export function __wbg_basemesh_free(a: number, b: number): void;
export function __wbg_get_basemesh_is_from_extruded(a: number): number;
export function __wbg_set_basemesh_is_from_extruded(a: number, b: number): void;
export function __wbg_get_basemesh_is_from_polygon(a: number): number;
export function __wbg_set_basemesh_is_from_polygon(a: number, b: number): void;
export function __wbg_get_basemesh_position(a: number): number;
export function __wbg_set_basemesh_position(a: number, b: number): void;
export function __wbg_get_basemesh_rotation(a: number): number;
export function __wbg_set_basemesh_rotation(a: number, b: number): void;
export function __wbg_get_basemesh_scale(a: number): number;
export function __wbg_set_basemesh_scale(a: number, b: number): void;
export function basemesh_set_id(a: number, b: number, c: number): void;
export function basemesh_id(a: number, b: number): void;
export function basemesh_new(a: number, b: number): number;
export function basemesh_outline(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
